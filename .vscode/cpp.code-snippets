{
	// Place your kyopuro workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"for": {
		"scope": "cpp",
		"prefix": "for",
		"body": [
			"for(${1:int} ${2:i}=${3:0};${2:i}<${4:n};++${2:i}){",
			"  $0",
      "}"
		]
	},
	"reverse for": {
		"scope": "cpp",
		"prefix": "forr",
		"body": [
			"for(${1:int} ${2:i}=${3:n-1};${2:i}>=${4:0};--${2:i}){",
			"  ${0}",
			"}"
		]
	},
	"vector cin": {
		"scope": "cpp",
		"prefix": "vcin",
		"body": [
			"for(auto&${1:i}:${2:v})cin>>${1};"
		]
	},
	"if": {
		"scope": "cpp",
		"prefix": "if",
		"body": [
			"if(${1}){",
			"  ${0}",
			"}"
		]
	},
	"like if": {
		"scope": "cpp",
		"prefix": "like",
		"body": [
			"if(${1})[[likely]]{",
			"  ${0}",
			"}"
		]
	},
	"unlike if": {
		"scope": "cpp",
		"prefix": "unlike",
		"body": [
			"if(${1})[[unlikely]]{",
			"  ${0}",
			"}"
		]
	},
	"else": {
		"scope": "cpp",
		"prefix": "else",
		"body": [
			"else{",
			"  ${0}",
			"}"
		]
	},
	"include": {
		"scope": "cpp",
		"prefix": "#in",
		"body": [
			"#include <${1}>"
		]
	},
	"reference loop": {
		"scope": "cpp",
		"prefix": "rfor",
		"body": [
			"for(auto&${1:i}:${2:v}){",
			"  ${0}",
			"}"
		]
	},
	"while loop": {
		"scope": "cpp",
		"prefix": "while",
		"body": [
			"while(${1}){",
			"  ${0}",
			"}"
		]
	}
}